1] Merge string alternately
class Solution:
    def mergeAlternately(self, word1: str, word2: str) -> str:
        A,B=len(word1),len(word2)
        a,b=0,0
        s=[]
        word=1
        while a<A and b<B:
            if word==1:
                s.append(word1[a])
                a+=1
                word=2
            else:
                s.append(word2[b])
                b+=1
                word=1
        while a<A:
            s.append(word1[a])
            a+=1
        while b<B:
            s.append(word2[b])
            b+=1
        return "".join(s)

2] Find closest number to zero
class Solution:
    def findClosestNumber(self, nums: List[int]) -> int:
        closest=nums[0]
        for x in nums:
            if abs(x) < abs(closest):
                closest=x
        if closest < 0 and abs(closest) in nums:
            return abs(closest)
        else:
            return closest

3] jewels and stones
class Solution:
    def numJewelsInStones(self, jewels: str, stones: str) -> int:
        s=set(jewels)
        count=0
        for stone in stones:
            if stone in s:
                count+=1
        return count

3]Reverse Integer
class Solution:
    def reverse(self, x: int) -> int:
        is_negative = x < 0
        x = abs(x)

        # Reverse the digits
        reversed_x = 0
        while x > 0:
            reversed_x = reversed_x * 10 + x % 10
            x //= 10

        # Check for overflow
        if reversed_x > 2**31 - 1:
            return 0

        # Restore the original sign
        if is_negative:
            reversed_x = -reversed_x

        return reversed_x

4] Two sum
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        dict={}
        for i ,num in enumerate(nums):
            component=target-num
            if component in dict :
                return [dict[component],i]
            dict[num]=i
        return[]

5]Add two integers
class Solution:
    def sum(self, num1: int, num2: int) -> int:
        sum1=num1+num2
        return sum1
        
6]Reverse String

class Solution:
    def reverseString(self, s: List[str]) -> None:
        s.reverse()
        
7] Baseball Game
class Solution:
    def calPoints(self, operations: List[str]) -> int:
        stk=[]
        for op in operations:
            if op=='+':
                stk.append(stk[-1]+stk[-2])
            elif op=='D':
                stk.append(stk[-1]*2)
            elif op=='C':
                stk.pop()
            else:
                stk.append(int (op))  
        return sum(stk)  

8] Fibonacci Number
 class Solution:
    def fib(self, n: int) -> int:
        if n==0:
            return 0
        if n==1:
            return 1
        pre=0
        cur=1
        for i in range(2,n+1):
            pre,cur=cur,cur+pre
        return cur

9] Climbing Stairs
class Solution:
    def climbStairs(self, n: int) -> int:
        if n==1:
            return 1
        if n==2:
            return 2
        cur=2
        pre=1
        for i in range(2,n):
            pre,cur=cur,cur+pre
        return cur
        
10] Sqrt(x)
class Solution:
    def mySqrt(self, x: int) -> int:
        return int(x**(1/2))
        
11] Classes more than 5 students

select class
from courses
group by class
having count(class)>=5

12] Big Countries
select name,population,area 
from world 
where area>=3000000 or population >=25000000

13] customer placing the largest number of orders
select customer_number
from orders
group by customer_number
order by count(customer_number) desc
limit 1;

14] Palindrome 
class Solution:
    def isPalindrome(self, n: int):
        x=str(n)
        res=x[::-1]
        return res==x
        
15] Combine two tables
SELECT p.firstName, p.lastName, a.city, a.state
FROM Person p
left JOIN Address a ON p.personId = a.personId;

16]Find the Index of the First Occurrence in a String
 class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        return haystack.find(needle)

17] Search Insert Position
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left=0
        right=len(nums)-1
        while left<=right:
            mid=(left+right)//2

            if nums[mid]==target:
                return mid
            elif nums[mid]>target:
                right= mid-1
            else:
                left=mid+1
        return left

18] Valid Anagram
from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s)!=len(t):
            return False
        s_cnt=Counter(s)
        t_cnt=Counter(t)

        if s_cnt==t_cnt:
            return True
        else:
	    return False

19]Majority element
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        counter={}
        for i in nums:
            if i in counter:
                counter[i]+=1
            else:
                counter[i]=1
        max_val=-1
        ans=-1

        for key,value in counter.items():
            if value>max_val:
                max_val=value
                ans=key
        return ans
        
20]Duplicate elements
SELECT email
FROM person
GROUP BY email
HAVING COUNT(email) > 1;

21] Power of two
class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        if n <= 0:
            return False
        return (n&(n-1))==0

22] Add digits
class Solution:
    def addDigits(self, num: int) -> int:
        while num>=10:
            sum=0
            for i in str(num):
                sum+=int(i)
            num=sum
        return num
        
23] Contains Duplicates
 class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        s=set()
        for i in nums:
            if i in s:
                return True
            else:
                s.add(i)
        return False

24] Sum of two integer
class Solution:
    def getSum(self, a: int, b: int) -> int:
        return sum([a,b])

25] Add binary
class Solution:
    def addBinary(self, a: str, b: str) -> str:
        A=int(a,2)
        B=int(b,2)
        output=A+B
        return bin(output)[2:]

26] Same Tree
class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if not p and not q:
            return True
        if not p or not q:
            return False
        if p.val!=q.val:
            return False
        return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)

27] Maximum consecutive ones
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        cnt=0
        maxi=0
        for i in range(len(nums)):
            if nums[i]==1:
                cnt+=1
            else:
                cnt=0
            maxi=max(maxi,cnt)
        return maxi

28] Sort the people
class Solution:
    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:
        pairs = list(zip(heights, names))
        pairs.sort(reverse=True)
        sorted_names = [name for _, name in pairs]
        return sorted_names

29] Sort Colors
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        nums.sort()
        
30] Invert Binary tree
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        root.left,root.right=root.right,root.left
        self.invertTree(root.left)
        self.invertTree(root.right)
        return root
        
31] Power(x,n)
class Solution:
    def myPow(self, x: float, n: int) -> float:
        return x**n
 
32]Length of last word
class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        string=s.strip()
        word=string.split()
        if word:
            return len(word[-1])
        
33]Excel sheet column title
class Solution:
    def convertToTitle(self, columnNumber: int) -> str:
        title=""
        while columnNumber>0:
            columnNumber-=1
            title=chr(columnNumber % 26 + ord('A'))+title
            columnNumber//=26
        return title
        

        
        
        